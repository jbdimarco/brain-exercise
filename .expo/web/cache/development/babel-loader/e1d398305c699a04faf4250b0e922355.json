{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Jorge Aquino\\\\Documents\\\\GitHub\\\\brain-exercise\\\\src\\\\components\\\\ProgressBar.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport PropTypes from \"prop-types\";\nimport * as Progress from \"react-native-progress\";\n\nvar ProgressBar = function (_Component) {\n  _inherits(ProgressBar, _Component);\n\n  var _super = _createSuper(ProgressBar);\n\n  function ProgressBar(props) {\n    var _this;\n\n    _classCallCheck(this, ProgressBar);\n\n    _this = _super.call(this, props);\n\n    _this.componentDidMount = function () {\n      _this.intervals.push(setInterval(function () {\n        if (_this.time % 60 > 0) {\n          _this.setState(function () {\n            return {\n              seconds: _this.time % 60\n            };\n          });\n        }\n\n        if (_this.time % 60 === 0) {\n          if (Math.floor(_this.time / 60) === 0) {\n            _this.intervals.forEach(function (interval) {\n              clearInterval(interval);\n            });\n\n            _this.setState(function () {\n              return {\n                seconds: 0\n              };\n            });\n\n            _this.props.func();\n          } else {\n            _this.setState(function () {\n              return {\n                minutes: Math.floor(_this.time / 60) - 1,\n                seconds: 59\n              };\n            });\n          }\n        }\n\n        _this.time -= 1;\n\n        _this.setState(function () {\n          return {\n            progress: 1.0 - _this.time / _this.props.seconds\n          };\n        });\n\n        if (_this.state.red != \"red\" && _this.time < _this.props.red) {\n          _this.setState(function () {\n            return {\n              red: true\n            };\n          });\n        }\n      }, 1000));\n    };\n\n    _this.componentWillUnmount = function () {\n      _this.intervals.forEach(function (interval) {\n        clearInterval(interval);\n      });\n    };\n\n    _this.getCurrentTime = function () {\n      return _this.props.seconds - _this.time;\n    };\n\n    _this.state = {\n      minutes: Math.floor(_this.props.seconds / 60),\n      seconds: props.seconds % 60,\n      progress: 0,\n      red: false\n    };\n    _this.intervals = [];\n    _this.time = props.seconds;\n    return _this;\n  }\n\n  _createClass(ProgressBar, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: {\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 40\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }\n      }, this.state.minutes, \":\", this.state.seconds.toString().padStart(2, \"0\")), React.createElement(Progress.Bar, {\n        progress: this.state.progress,\n        width: 375,\n        height: 20,\n        borderRadius: 10,\n        color: this.state.red ? \"red\" : \"blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return ProgressBar;\n}(Component);\n\nProgressBar.propTypes = {\n  seconds: PropTypes.number,\n  red: PropTypes.number,\n  func: PropTypes.func\n};\nexport default ProgressBar;","map":{"version":3,"sources":["C:/Users/Jorge Aquino/Documents/GitHub/brain-exercise/src/components/ProgressBar.js"],"names":["React","Component","PropTypes","Progress","ProgressBar","props","componentDidMount","intervals","push","setInterval","time","setState","seconds","Math","floor","forEach","interval","clearInterval","func","minutes","progress","state","red","componentWillUnmount","getCurrentTime","justifyContent","alignItems","fontSize","toString","padStart","propTypes","number"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { View, Text } from \"react-native\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Progress from \"react-native-progress\";\r\n\r\nclass ProgressBar extends Component {\r\n  /**\r\n   * Set up\r\n   * @param {*} props contains three props:\r\n   * seconds: time of problem in seconds\r\n   * red: in seconds when the bar should turn red\r\n   * func: function to be called after the timer completes. call at line 41\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      minutes: Math.floor(this.props.seconds / 60),\r\n      seconds: props.seconds % 60,\r\n      progress: 0,\r\n      red: false,\r\n    };\r\n    this.intervals = [];\r\n    this.time = props.seconds;\r\n  }\r\n\r\n  /**\r\n   * Starts the timer\r\n   */\r\n  componentDidMount = () => {\r\n    this.intervals.push(\r\n      setInterval(() => {\r\n        if (this.time % 60 > 0) {\r\n          this.setState(() => ({\r\n            seconds: this.time % 60,\r\n          }));\r\n        }\r\n        if (this.time % 60 === 0) {\r\n          if (Math.floor(this.time / 60) === 0) {\r\n            this.intervals.forEach((interval) => {\r\n              clearInterval(interval);\r\n            });\r\n            this.setState(() => ({\r\n              seconds: 0,\r\n            }));\r\n            this.props.func();\r\n          } else {\r\n            this.setState(() => ({\r\n              minutes: Math.floor(this.time / 60) - 1,\r\n              seconds: 59,\r\n            }));\r\n          }\r\n        }\r\n        this.time -= 1;\r\n        this.setState(() => ({\r\n          progress: 1.0 - this.time / this.props.seconds,\r\n        }));\r\n        if (this.state.red != \"red\" && this.time < this.props.red) {\r\n          this.setState(() => ({\r\n            red: true,\r\n          }));\r\n        }\r\n      }, 1000)\r\n    );\r\n  };\r\n\r\n  /**\r\n   * cancels the interval on unmount\r\n   */\r\n  componentWillUnmount = () => {\r\n    this.intervals.forEach((interval) => {\r\n      clearInterval(interval);\r\n    });\r\n  };\r\n\r\n  getCurrentTime = () => {\r\n    return this.props.seconds - this.time\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View style={{ justifyContent: \"center\", alignItems: \"center\" }}>\r\n        <Text style={{ fontSize: 40 }}>\r\n          {this.state.minutes}:{this.state.seconds.toString().padStart(2, \"0\")}\r\n        </Text>\r\n        <Progress.Bar\r\n          progress={this.state.progress}\r\n          width={375}\r\n          height={20}\r\n          borderRadius={10}\r\n          color={this.state.red ? \"red\" : \"blue\"}\r\n        />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nProgressBar.propTypes = {\r\n  seconds: PropTypes.number,\r\n  red: PropTypes.number,\r\n  func: PropTypes.func,\r\n};\r\n\r\nexport default ProgressBar;\r\n// functional component version\r\n// const ProgressBar = (props) => {\r\n//     const [minutes, setMinutes] = React.useState(Math.floor(props.seconds / 60))\r\n//     const [seconds, setSeconds] = React.useState(props.seconds % 60)\r\n//     const [progress, setProgress] = React.useState(0)\r\n//     const [red, setRed] = React.useState(false)\r\n//     useEffect(() => startTimer(), [])\r\n\r\n//     const startTimer = () => {\r\n//         let time = props.seconds\r\n//         const myInterval = setInterval(() => {\r\n//             if (time % 60 > 0) {\r\n//                 setSeconds(time % 60)\r\n//             }\r\n//             if (time % 60 === 0) {\r\n//                 if (Math.floor(time / 60) === 0) {\r\n//                     clearInterval(myInterval)\r\n//                     setSeconds(0)\r\n//                 } else {\r\n//                     setSeconds(59)\r\n//                     setMinutes(Math.floor(time / 60) - 1)\r\n//                 }\r\n//             }\r\n//             time -= 1\r\n//             setProgress(1.0 - time/props.seconds)\r\n//             if (time < props.red) {\r\n//                 setRed(true)\r\n//             }\r\n//         }, 1000)\r\n//     }\r\n\r\n//     return (\r\n//         <View style = {{justifyContent: \"center\", alignItems: \"center\"}}>\r\n//             <Text style = {{fontSize: 40}}>{minutes}:{seconds.toString().padStart(2, \"0\")}</Text>\r\n//             <Progress.Bar\r\n//                 progress={progress}\r\n//                 width={375}\r\n//                 height={20}\r\n//                 borderRadius={10}\r\n//                 color = {red ? \"red\":\"purple\"}\r\n//             />\r\n//         </View>\r\n//     )\r\n// }\r\n\r\n// export default ProgressBar\r\n"]},"metadata":{},"sourceType":"module"}