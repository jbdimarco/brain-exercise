{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Jorge Aquino\\\\Documents\\\\GitHub\\\\brain-exercise\\\\src\\\\screens\\\\Game\\\\Gameplay.jsx\";\nimport \"react-native-gesture-handler\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Button } from \"react-native-elements\";\nimport PropTypes from \"prop-types\";\nimport ProgressBar from \"../../components/ProgressBar\";\nimport getProblem from \"../../scripts/game-logic\";\nvar styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    backgroundColor: \"#eaeaea\"\n  },\n  expressionText: {\n    fontSize: 50,\n    fontWeight: \"bold\",\n    paddingBottom: 40\n  },\n  textContainer: {\n    flex: 1,\n    paddingTop: 30,\n    justifyContent: \"center\",\n    backgroundColor: \"#eaeaea\",\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    textAlign: \"center\"\n  },\n  container: {\n    flex: 3,\n    paddingBottom: 50,\n    paddingLeft: 10,\n    paddingRight: 10,\n    justifyContent: \"space-around\",\n    flexDirection: \"row\",\n    backgroundColor: \"#eaeaea\",\n    flexWrap: \"wrap\",\n    alignContent: \"stretch\"\n  },\n  button: {\n    width: 99,\n    height: 99,\n    backgroundColor: \"#eaeaea\",\n    borderRadius: 25,\n    borderColor: \"rgba(0, 138, 252, 0.2)\",\n    borderWidth: 5,\n    marginTop: 20,\n    alignSelf: \"center\"\n  },\n  selectedButton: {\n    width: 99,\n    height: 99,\n    backgroundColor: \"rgba(0, 138, 252, 0.2)\",\n    borderRadius: 25,\n    borderColor: \"rgba(0, 138, 252, 0.2)\",\n    borderWidth: 5,\n    marginTop: 20,\n    alignSelf: \"center\"\n  },\n  buttonTitle: {\n    textAlign: \"center\",\n    fontSize: 40,\n    fontWeight: \"100\",\n    color: \"#2f4f4f\"\n  }\n});\n\nfunction Gameplay(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(getProblem()),\n      _useState2 = _slicedToArray(_useState, 2),\n      problem = _useState2[0],\n      setProblem = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      message = _useState4[0],\n      setMessage = _useState4[1];\n\n  var _useState5 = useState(300),\n      _useState6 = _slicedToArray(_useState5, 2),\n      remainingTime = _useState6[0],\n      setRemainingTime = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      answered = _useState8[0],\n      setAnswered = _useState8[1];\n\n  var pBar = React.createRef();\n\n  var right = function right() {\n    return React.createElement(Button, {\n      titleStyle: {\n        color: \"white\",\n        fontSize: 16\n      },\n      buttonStyle: {\n        backgroundColor: 'transparent',\n        marginRight: 10\n      },\n      onPress: function onPress() {\n        return navigation.navigate(\"Pause\");\n      },\n      title: \"Pause\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 5\n      }\n    });\n  };\n\n  React.useLayoutEffect(function () {\n    navigation.setOptions({\n      headerRight: right\n    });\n  }, [navigation]);\n\n  function getNewProblem() {\n    setMessage(\"\");\n    setAnswered(false);\n    setProblem(getProblem());\n  }\n\n  function checkAnswer(choiceValue) {\n    if (!answered) {\n      setRemainingTime(pBar.current.getCurrentTime());\n\n      if (choiceValue === problem.solution) {\n        setMessage(\"Correct! Great job!\");\n      } else {\n        setMessage('Youâ€™re so quick! Keep going!');\n      }\n\n      setAnswered(true);\n      setTimeout(function () {\n        getNewProblem();\n      }, 5000);\n    }\n  }\n\n  var choicesArray = problem.choices;\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      picked = _React$useState2[0],\n      setPicked = _React$useState2[1];\n\n  var choices = choicesArray.map(function (choiceValue, choiceKey) {\n    return React.createElement(Button, {\n      key: choiceKey,\n      onPress: function onPress() {\n        setPicked(choiceKey);\n        checkAnswer(choiceValue);\n      },\n      buttonStyle: answered && choiceKey === picked ? styles.selectedButton : styles.button,\n      title: \"\" + choiceValue,\n      titleStyle: styles.buttonTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }\n    });\n  });\n  return React.createElement(View, {\n    style: styles.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: {\n      opacity: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, React.createElement(ProgressBar, {\n    seconds: 300,\n    red: 60,\n    func: function func() {\n      navigation.navigate(\"FinishedScreen\");\n    },\n    ref: pBar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: styles.textContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.expressionText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, problem.expression)), React.createElement(Text, {\n    style: {\n      backgroundColor: \"#eaeaea\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, message), React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, choices));\n}\n\nGameplay.propTypes = {\n  navigation: PropTypes.object\n};\nexport default Gameplay;","map":{"version":3,"sources":["C:/Users/Jorge Aquino/Documents/GitHub/brain-exercise/src/screens/Game/Gameplay.jsx"],"names":["React","useState","Button","PropTypes","ProgressBar","getProblem","styles","StyleSheet","create","root","flex","backgroundColor","expressionText","fontSize","fontWeight","paddingBottom","textContainer","paddingTop","justifyContent","flexDirection","flexWrap","alignItems","textAlign","container","paddingLeft","paddingRight","alignContent","button","width","height","borderRadius","borderColor","borderWidth","marginTop","alignSelf","selectedButton","buttonTitle","color","Gameplay","navigation","problem","setProblem","message","setMessage","remainingTime","setRemainingTime","answered","setAnswered","pBar","createRef","right","marginRight","navigate","useLayoutEffect","setOptions","headerRight","getNewProblem","checkAnswer","choiceValue","current","getCurrentTime","solution","setTimeout","choicesArray","choices","picked","setPicked","map","choiceKey","opacity","expression","propTypes","object"],"mappings":"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","sourcesContent":["/* eslint-disable no-alert */\r\nimport \"react-native-gesture-handler\";\r\nimport React, { useState } from \"react\";\r\nimport { View, Text, StyleSheet } from \"react-native\";\r\nimport { Button } from \"react-native-elements\";\r\nimport PropTypes from \"prop-types\";\r\nimport ProgressBar from \"../../components/ProgressBar\";\r\nimport getProblem from \"../../scripts/game-logic\";\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    backgroundColor: \"#eaeaea\",\r\n  },\r\n  expressionText: {\r\n    fontSize: 50,\r\n    fontWeight: \"bold\",\r\n    paddingBottom: 40,\r\n  },\r\n  textContainer: {\r\n    flex: 1,\r\n    paddingTop: 30,\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"#eaeaea\",\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n    alignItems: \"center\",\r\n    textAlign: \"center\",\r\n  },\r\n  container: {\r\n    flex: 3,\r\n    paddingBottom: 50,\r\n    paddingLeft: 10,\r\n    paddingRight: 10,\r\n    justifyContent: \"space-around\",\r\n    flexDirection: \"row\",\r\n    backgroundColor: \"#eaeaea\",\r\n    flexWrap: \"wrap\",\r\n    alignContent: \"stretch\",\r\n  },\r\n  button: {\r\n    width: 99,\r\n    height: 99,\r\n    backgroundColor: \"#eaeaea\",\r\n    borderRadius: 25,\r\n    borderColor: \"rgba(0, 138, 252, 0.2)\",\r\n    borderWidth: 5,\r\n    marginTop: 20,\r\n    alignSelf: \"center\",\r\n  },\r\n  selectedButton: {\r\n    width: 99,\r\n    height: 99,\r\n    backgroundColor: \"rgba(0, 138, 252, 0.2)\",\r\n    borderRadius: 25,\r\n    borderColor: \"rgba(0, 138, 252, 0.2)\",\r\n    borderWidth: 5,\r\n    marginTop: 20,\r\n    alignSelf: \"center\",\r\n  },\r\n  buttonTitle: {\r\n    textAlign: \"center\",\r\n    fontSize: 40,\r\n    fontWeight: \"100\",\r\n    color: \"#2f4f4f\",\r\n  },\r\n});\r\n\r\nfunction Gameplay( {navigation} ) {\r\n  const [problem, setProblem] = useState(getProblem());\r\n  const [message, setMessage] = useState(\"\")\r\n  const [remainingTime, setRemainingTime] = useState(300)\r\n  const [answered, setAnswered] = useState(false)\r\n  let pBar = React.createRef()\r\n  \r\n  const right = () => (\r\n    <Button\r\n      titleStyle={{\r\n        color: \"white\",\r\n        fontSize: 16,\r\n      }}\r\n      buttonStyle={{\r\n        backgroundColor: 'transparent',\r\n        marginRight: 10,\r\n      }}\r\n      onPress={() => navigation.navigate(\"Pause\")} title=\"Pause\"\r\n    />\r\n  )\r\n\r\n  React.useLayoutEffect(() => {\r\n    navigation.setOptions({\r\n      headerRight: right,\r\n    });\r\n  }, [navigation]);\r\n\r\n  function getNewProblem() {\r\n    setMessage(\"\")\r\n    setAnswered(false)\r\n    setProblem(getProblem());\r\n  }\r\n\r\n  function checkAnswer(choiceValue) {\r\n    if (!answered) {\r\n      setRemainingTime(pBar.current.getCurrentTime())\r\n      if (choiceValue === problem.solution) {\r\n        setMessage(`Correct! Great job!`);\r\n      } else {\r\n        setMessage('Youâ€™re so quick! Keep going!');\r\n      }\r\n      setAnswered(true)\r\n      setTimeout(() => {getNewProblem()}, 5000)\r\n    }\r\n  }\r\n\r\n  const choicesArray = problem.choices;\r\n  const [picked, setPicked] = React.useState(0)\r\n  const choices = choicesArray.map((choiceValue, choiceKey) => {\r\n    return (\r\n      <Button\r\n        key={choiceKey}\r\n        onPress={() => {\r\n          setPicked(choiceKey)\r\n          checkAnswer(choiceValue)\r\n        }}\r\n        buttonStyle={answered && choiceKey === picked ? styles.selectedButton : styles.button}\r\n        title={`${choiceValue}`}\r\n        titleStyle={styles.buttonTitle}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <View style={styles.root}>\r\n      <View style={{opacity: 0}}>\r\n        <ProgressBar seconds = {300} red = {60} func = {() => {navigation.navigate(\"FinishedScreen\")}} ref = {pBar}/>\r\n      </View>\r\n      \r\n      <View style={styles.textContainer}>\r\n        <Text style={styles.expressionText}>{problem.expression}</Text>\r\n      </View>\r\n      <Text style={{backgroundColor: \"#eaeaea\"}}>{message}</Text>\r\n      <View style={styles.container}>\r\n        {choices}\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nGameplay.propTypes = {\r\n  navigation: PropTypes.object,\r\n};\r\n\r\nexport default Gameplay;\r\n"]},"metadata":{},"sourceType":"module"}