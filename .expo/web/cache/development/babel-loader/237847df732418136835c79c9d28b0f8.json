{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Jorge Aquino\\\\Documents\\\\GitHub\\\\brain-exercise\\\\src\\\\screens\\\\Game\\\\ReadingMain.jsx\";\nimport propTypes from \"prop-types\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Button } from \"react-native-elements\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport ProgressBar from \"../../components/ProgressBar\";\nvar styles = StyleSheet.create({\n  root: {\n    justifyContent: \"space-between\",\n    flex: 1,\n    margin: 25,\n    alignItems: \"center\",\n    marginHorizontal: 15\n  },\n  instructions: {\n    marginTop: 20,\n    flex: 0.4,\n    fontWeight: \"bold\",\n    fontSize: 30,\n    textAlign: \"center\"\n  },\n  article: {\n    flex: 1.8,\n    fontSize: 20,\n    textAlign: \"center\"\n  },\n  nextButton: {\n    borderRadius: 10,\n    marginTop: 20,\n    height: 55,\n    width: 320,\n    backgroundColor: \"#005AA3\"\n  }\n});\nexport default function ReadingMain(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState(route.params),\n      _useState2 = _slicedToArray(_useState, 2),\n      stories = _useState2[0],\n      setStories = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      timeUp = _useState4[0],\n      setTimeUp = _useState4[1];\n\n  var updateStories = function updateStories(storiesObj) {\n    var storiesJsonString;\n    return _regeneratorRuntime.async(function updateStories$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setStories(storiesObj);\n            storiesJsonString = JSON.stringify(storiesObj);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"STORIES\", storiesJsonString));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  function resetStoryReadStatus() {\n    var myStories = stories;\n    var storyKeys = Object.keys(stories);\n\n    for (var i = 0; i < storyKeys.length; i += 1) {\n      var key = storyKeys[i];\n      myStories[key].readAlready = false;\n    }\n\n    updateStories(myStories);\n  }\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentArticle = _useState6[0],\n      setCurrentArticle = _useState6[1];\n\n  var loadStoryText = function loadStoryText() {\n    var storyData = Object.values(stories);\n    var storyNames = Object.keys(stories);\n    var numStories = storyData.length;\n\n    for (var index = 0; index < numStories; index += 1) {\n      var story = storyData[index];\n\n      if (!story.readAlready) {\n        setCurrentArticle(storyNames[index]);\n        return story.text;\n      }\n    }\n\n    resetStoryReadStatus();\n    setCurrentArticle(storyNames[0]);\n    return storyData[0].text;\n  };\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      paragraph = _useState8[0],\n      setParagraph = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      paragraphs = _useState10[0],\n      setParagraphs = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      page = _useState12[0],\n      setPage = _useState12[1];\n\n  useEffect(function () {\n    var initialStory = loadStoryText();\n    setParagraphs(initialStory);\n    setParagraph(initialStory[0]);\n  }, []);\n\n  var buttonFunction = function buttonFunction() {\n    if (timeUp) {\n      navigation.navigate(\"GameOverview\");\n    } else if (page === paragraphs.length - 1) {\n      var myNewStories = stories;\n      myNewStories[currentArticle].readAlready = true;\n      updateStories(myNewStories);\n      var initialStory = loadStoryText();\n      setParagraphs(initialStory);\n      setParagraph(initialStory[0]);\n      setPage(0);\n    } else {\n      setParagraph(paragraphs[page + 1]);\n      setPage(page + 1);\n    }\n  };\n\n  return React.createElement(View, {\n    style: styles.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, React.createElement(ProgressBar, {\n    seconds: 600,\n    red: 30,\n    func: function func() {\n      return setTimeUp(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    style: styles.instructions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, \"Read the passage aloud.\"), React.createElement(Text, {\n    style: styles.article,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, paragraph), React.createElement(Button, {\n    title: \"Next\",\n    buttonStyle: styles.nextButton,\n    onPress: function onPress() {\n      return buttonFunction();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }));\n}\nReadingMain.propTypes = {\n  navigation: propTypes.object,\n  route: propTypes.any\n};","map":{"version":3,"sources":["C:/Users/Jorge Aquino/Documents/GitHub/brain-exercise/src/screens/Game/ReadingMain.jsx"],"names":["propTypes","React","useState","useEffect","Button","AsyncStorage","ProgressBar","styles","StyleSheet","create","root","justifyContent","flex","margin","alignItems","marginHorizontal","instructions","marginTop","fontWeight","fontSize","textAlign","article","nextButton","borderRadius","height","width","backgroundColor","ReadingMain","navigation","route","params","stories","setStories","timeUp","setTimeUp","updateStories","storiesObj","storiesJsonString","JSON","stringify","setItem","resetStoryReadStatus","myStories","storyKeys","Object","keys","i","length","key","readAlready","currentArticle","setCurrentArticle","loadStoryText","storyData","values","storyNames","numStories","index","story","text","paragraph","setParagraph","paragraphs","setParagraphs","page","setPage","initialStory","buttonFunction","navigate","myNewStories","object","any"],"mappings":"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","sourcesContent":["import propTypes from \"prop-types\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { View, Text, StyleSheet } from \"react-native\";\r\nimport { Button } from \"react-native-elements\";\r\nimport AsyncStorage from \"@react-native-community/async-storage\"\r\nimport ProgressBar from \"../../components/ProgressBar\";\r\n\r\nconst styles = StyleSheet.create({\r\n    root: {\r\n        justifyContent: \"space-between\",\r\n        flex: 1,\r\n        margin: 25,\r\n        alignItems: \"center\",\r\n        marginHorizontal: 15,\r\n    },\r\n    instructions: {\r\n        marginTop: 20,\r\n        flex: 0.4,\r\n        fontWeight: \"bold\",\r\n        fontSize: 30,\r\n        textAlign: \"center\",\r\n    },\r\n    article: {\r\n        flex: 1.8,\r\n        fontSize: 20,\r\n        textAlign: \"center\",\r\n    },\r\n    nextButton: {\r\n        borderRadius: 10,\r\n        marginTop: 20,\r\n        height: 55,\r\n        width: 320,\r\n        backgroundColor: \"#005AA3\",\r\n    },\r\n});\r\n\r\nexport default function ReadingMain({ navigation, route }) {\r\n    const [stories, setStories] = useState(route.params);\r\n    const [timeUp, setTimeUp] = useState(false);\r\n\r\n    /**\r\n     * Takes in a stories object and updates the status of each story in async.\r\n     * @param {Object} storiesObj \r\n     */\r\n    const updateStories = async (storiesObj) => {\r\n        setStories(storiesObj);\r\n        const storiesJsonString = JSON.stringify(storiesObj)\r\n        await AsyncStorage.setItem(\"STORIES\", storiesJsonString)\r\n    }\r\n\r\n    /**\r\n     * Once all stories have been read, the readAlready status of the\r\n     * stories are set to false to allow recycling of stories.\r\n     */\r\n    function resetStoryReadStatus() {\r\n        const myStories = stories;\r\n        const storyKeys = Object.keys(stories);\r\n        for (let i = 0; i < storyKeys.length; i += 1) {\r\n            const key = storyKeys[i];\r\n            myStories[key].readAlready = false;\r\n        }\r\n        updateStories(myStories);\r\n    } \r\n\r\n    const [currentArticle, setCurrentArticle] = useState();\r\n\r\n    /**\r\n     * Goes through the stories object and selects a story that hasn't been read yet\r\n     * Returns an array of paragraphs\r\n     */\r\n    const loadStoryText = () => {\r\n        const storyData = Object.values(stories)\r\n        const storyNames = Object.keys(stories)\r\n        const numStories = storyData.length\r\n        // Find a story that hasn't been read yet\r\n        for (let index = 0; index < numStories; index += 1) {\r\n            const story = storyData[index];\r\n            if (!story.readAlready) {\r\n                setCurrentArticle(storyNames[index]);\r\n                return story.text\r\n            }\r\n        }\r\n        // If all stories have been read, recycle stories\r\n        // and return the first one\r\n        resetStoryReadStatus();\r\n        setCurrentArticle(storyNames[0]);\r\n        return storyData[0].text\r\n    }\r\n\r\n    const [paragraph, setParagraph] = useState(\"\");\r\n    const [paragraphs, setParagraphs] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const initialStory = loadStoryText();\r\n        setParagraphs(initialStory);\r\n        setParagraph(initialStory[0]);\r\n    }, [])\r\n\r\n    /**\r\n     * If the 10 minutes alloted for reading are up, this will take the user to next section.\r\n     * If not, this button will pull up the next paragraph of the current article or move on\r\n     * to the next one once the user is finished.\r\n     */\r\n    const buttonFunction = () => {\r\n        if (timeUp) {\r\n            navigation.navigate(\"GameOverview\")\r\n        } else if (page === paragraphs.length - 1) {\r\n            const myNewStories = stories;\r\n            myNewStories[currentArticle].readAlready = true;\r\n            updateStories(myNewStories);\r\n            const initialStory = loadStoryText();\r\n            setParagraphs(initialStory);\r\n            setParagraph(initialStory[0]);\r\n            setPage(0);\r\n        } else {\r\n            setParagraph(paragraphs[page + 1]);\r\n            setPage(page + 1);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <View style={styles.root}>\r\n            <ProgressBar\r\n             seconds={600}\r\n             red={30}\r\n             func={() => setTimeUp(true)}\r\n             />\r\n            <Text style={styles.instructions}>Read the passage aloud.</Text>\r\n            <Text style={styles.article}>{paragraph}</Text>\r\n            <Button\r\n             title=\"Next\"\r\n             buttonStyle={styles.nextButton}\r\n             onPress={() => buttonFunction()}\r\n             />\r\n        </View>\r\n    )\r\n}\r\n\r\nReadingMain.propTypes = {\r\n    navigation: propTypes.object,\r\n    route: propTypes.any,\r\n}\r\n"]},"metadata":{},"sourceType":"module"}