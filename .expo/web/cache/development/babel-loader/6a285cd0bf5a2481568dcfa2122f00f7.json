{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Jorge Aquino\\\\Documents\\\\GitHub\\\\brain-exercise\\\\src\\\\screens\\\\Settings\\\\SoundScreen.jsx\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport { Button } from \"react-native-elements\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport PropTypes from \"prop-types\";\nimport { defaultSettings } from \"./SettingsScreen.jsx\";\nvar styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    justifyContent: \"space-between\",\n    margin: 25\n  },\n  settingsBlock: {\n    flex: 1,\n    justifyContent: \"space-between\",\n    maxHeight: 70\n  },\n  settingAndSwitch: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    paddingVertical: 20\n  },\n  saveButton: {\n    backgroundColor: \"#2a652c\",\n    borderRadius: 10,\n    marginTop: 20,\n    height: 45\n  }\n});\n\nfunction SoundScreen(_ref) {\n  var route = _ref.route;\n\n  var _useState = useState(route.params.soundEffectsOn || defaultSettings.soundEffectsOn),\n      _useState2 = _slicedToArray(_useState, 2),\n      soundEffectsToggleOn = _useState2[0],\n      setSoundEffectsToggleOn = _useState2[1];\n\n  var _useState3 = useState(route.params.backgroundMusicOn || defaultSettings.backgroundMusicOn),\n      _useState4 = _slicedToArray(_useState3, 2),\n      backgroundMusicToggleOn = _useState4[0],\n      setBackgroundMusicToggleOn = _useState4[1];\n\n  var _useState5 = useState(route.params.voiceOverOn || defaultSettings.voiceOverOn),\n      _useState6 = _slicedToArray(_useState5, 2),\n      voiceOverToggleOn = _useState6[0],\n      setVoiceOverToggleOn = _useState6[1];\n\n  var settingsObj = route.params;\n\n  var storeSettings = function storeSettings() {\n    var switchType,\n        jsonSettings,\n        _args = arguments;\n    return _regeneratorRuntime.async(function storeSettings$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            switchType = _args.length > 0 && _args[0] !== undefined ? _args[0] : \"saving\";\n\n            if (!(switchType === \"soundEffects\")) {\n              _context.next = 5;\n              break;\n            }\n\n            if (soundEffectsToggleOn) {\n              setSoundEffectsToggleOn(false);\n              settingsObj.soundEffectsOn = false;\n            } else {\n              setSoundEffectsToggleOn(true);\n              settingsObj.soundEffectsOn = true;\n            }\n\n            _context.next = 16;\n            break;\n\n          case 5:\n            if (!(switchType === \"backgroundMusic\")) {\n              _context.next = 9;\n              break;\n            }\n\n            if (backgroundMusicToggleOn) {\n              setBackgroundMusicToggleOn(false);\n              settingsObj.backgroundMusicOn = false;\n            } else {\n              setBackgroundMusicToggleOn(true);\n              settingsObj.backgroundMusicOn = true;\n            }\n\n            _context.next = 16;\n            break;\n\n          case 9:\n            if (!(switchType === \"voiceOver\")) {\n              _context.next = 13;\n              break;\n            }\n\n            if (voiceOverToggleOn) {\n              setVoiceOverToggleOn(false);\n              settingsObj.voiceOverOn = false;\n            } else {\n              setVoiceOverToggleOn(true);\n              settingsObj.voiceOverOn = true;\n            }\n\n            _context.next = 16;\n            break;\n\n          case 13:\n            jsonSettings = JSON.stringify(settingsObj);\n            _context.next = 16;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"SETTINGS\", jsonSettings));\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.settingsBlock,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: styles.settingAndSwitch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: route.params.fontSize\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }, \"Sound Effects\"), React.createElement(Switch, {\n    trackColor: {\n      false: \"#ffffff\",\n      true: \"#2a652c\"\n    },\n    onValueChange: function onValueChange() {\n      return storeSettings(\"soundEffects\");\n    },\n    value: soundEffectsToggleOn,\n    accessibilityRole: \"switch\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  })), React.createElement(View, {\n    style: styles.settingAndSwitch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: route.params.fontSize\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }\n  }, \"Background Music\"), React.createElement(Switch, {\n    trackColor: {\n      false: \"#ffffff\",\n      true: \"#2a652c\"\n    },\n    onValueChange: function onValueChange() {\n      return storeSettings(\"backgroundMusic\");\n    },\n    value: backgroundMusicToggleOn,\n    accessibilityRole: \"switch\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  })), React.createElement(View, {\n    style: styles.settingAndSwitch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: route.params.fontSize\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 21\n    }\n  }, \"Voice Over\"), React.createElement(Switch, {\n    trackColor: {\n      false: \"#ffffff\",\n      true: \"#2a652c\"\n    },\n    onValueChange: function onValueChange() {\n      return storeSettings(\"voiceOver\");\n    },\n    value: voiceOverToggleOn,\n    accessibilityRole: \"switch\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  }))), React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, React.createElement(Button, {\n    buttonStyle: styles.saveButton,\n    title: \"Save Changes\",\n    onPress: function onPress() {\n      return storeSettings();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  })));\n}\n\nSoundScreen.propTypes = {\n  navigation: PropTypes.object,\n  route: PropTypes.object\n};\nexport default SoundScreen;","map":{"version":3,"sources":["C:/Users/Jorge Aquino/Documents/GitHub/brain-exercise/src/screens/Settings/SoundScreen.jsx"],"names":["React","useState","Button","AsyncStorage","PropTypes","defaultSettings","styles","StyleSheet","create","root","flex","justifyContent","margin","settingsBlock","maxHeight","settingAndSwitch","flexDirection","alignItems","paddingVertical","saveButton","backgroundColor","borderRadius","marginTop","height","SoundScreen","route","params","soundEffectsOn","soundEffectsToggleOn","setSoundEffectsToggleOn","backgroundMusicOn","backgroundMusicToggleOn","setBackgroundMusicToggleOn","voiceOverOn","voiceOverToggleOn","setVoiceOverToggleOn","settingsObj","storeSettings","switchType","jsonSettings","JSON","stringify","setItem","fontSize","false","true","propTypes","navigation","object"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { View, Text, StyleSheet, Switch } from \"react-native\";\r\nimport { Button } from \"react-native-elements\";\r\nimport AsyncStorage from \"@react-native-community/async-storage\";\r\nimport PropTypes from \"prop-types\";\r\nimport { defaultSettings } from \"./SettingsScreen.jsx\";\r\n\r\nconst styles = StyleSheet.create({\r\n    root: {\r\n        flex: 1,\r\n        justifyContent: \"space-between\",\r\n        margin: 25,\r\n    },\r\n\r\n    settingsBlock: {\r\n        flex: 1,\r\n        justifyContent: \"space-between\",\r\n        maxHeight: 70,\r\n    }, \r\n\r\n    settingAndSwitch: {\r\n        justifyContent: \"space-between\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        paddingVertical: 20,\r\n    },\r\n\r\n    saveButton: {\r\n        backgroundColor: \"#2a652c\",\r\n        borderRadius: 10,\r\n        marginTop: 20,\r\n        height: 45,\r\n    },\r\n})\r\n\r\n\r\nfunction SoundScreen({ route }) {\r\n    // Setting up states and state modifiers for the sound effects, background music, and voice over settings\r\n    const [soundEffectsToggleOn, setSoundEffectsToggleOn] = useState(route.params.soundEffectsOn\r\n        || defaultSettings.soundEffectsOn)\r\n    const [backgroundMusicToggleOn, setBackgroundMusicToggleOn] = useState(route.params.backgroundMusicOn\r\n        || defaultSettings.backgroundMusicOn)\r\n    const [voiceOverToggleOn, setVoiceOverToggleOn] = useState(route.params.voiceOverOn\r\n        || defaultSettings.voiceOverOn)\r\n    const settingsObj = route.params;\r\n    /**\r\n     * Takes in the setting type and updates the setting in async storage\r\n     * @param {String} switchType the type of setting to be updated, leave blank to push changes\r\n     */\r\n    const storeSettings = async (switchType = \"saving\") => {\r\n        if (switchType === \"soundEffects\") {\r\n            if (soundEffectsToggleOn) {\r\n                // going from enabled to unenabled\r\n                setSoundEffectsToggleOn(false)\r\n                settingsObj.soundEffectsOn = false\r\n            } else {\r\n                // going from unenabled to enabled\r\n                setSoundEffectsToggleOn(true)\r\n                settingsObj.soundEffectsOn = true\r\n            }\r\n        } else if (switchType === \"backgroundMusic\") {\r\n            if (backgroundMusicToggleOn) {\r\n                // going from enabled to unenabled\r\n                setBackgroundMusicToggleOn(false)\r\n                settingsObj.backgroundMusicOn = false\r\n            } else {\r\n                // going from unenabled to enabled\r\n                setBackgroundMusicToggleOn(true)\r\n                settingsObj.backgroundMusicOn= true\r\n            }\r\n        } else if (switchType === \"voiceOver\") {\r\n            if (voiceOverToggleOn) {\r\n                // going from enabled to unenabled\r\n                setVoiceOverToggleOn(false)\r\n                settingsObj.voiceOverOn = false\r\n            } else {\r\n                // going fron unenabled to enabled\r\n                setVoiceOverToggleOn(true)\r\n                settingsObj.voiceOverOn = true\r\n            }\r\n        } else {\r\n            // Only other option is to push the saved settings to async storage\r\n            const jsonSettings = JSON.stringify(settingsObj);\r\n            await AsyncStorage.setItem(\"SETTINGS\", jsonSettings);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <View style={styles.root}>\r\n            <View style={styles.settingsBlock}>\r\n                <View style={styles.settingAndSwitch}>\r\n                    <Text style={{fontSize: route.params.fontSize}}>\r\n                        Sound Effects\r\n                    </Text>\r\n                    <Switch\r\n                     trackColor={{ false: \"#ffffff\", true: \"#2a652c\" }}\r\n                     onValueChange={() => storeSettings(\"soundEffects\")}\r\n                     value={soundEffectsToggleOn}\r\n                     accessibilityRole=\"switch\"\r\n                     />\r\n                </View>\r\n                <View style={styles.settingAndSwitch}>\r\n                    <Text style={{fontSize: route.params.fontSize,}}>Background Music</Text>\r\n                    <Switch\r\n                     trackColor={{ false: \"#ffffff\", true: \"#2a652c\" }}\r\n                     onValueChange={() => storeSettings(\"backgroundMusic\")}\r\n                     value={backgroundMusicToggleOn}\r\n                     accessibilityRole=\"switch\"\r\n                     />\r\n                </View>\r\n                <View style={styles.settingAndSwitch}>\r\n                    <Text style={{fontSize: route.params.fontSize}}>Voice Over</Text>\r\n                    <Switch\r\n                     trackColor={{ false: \"#ffffff\", true: \"#2a652c\" }}\r\n                     onValueChange={() => storeSettings(\"voiceOver\")}\r\n                     value={voiceOverToggleOn}\r\n                     accessibilityRole=\"switch\"\r\n                     />\r\n                </View>\r\n            </View>\r\n            <View>\r\n                <Button\r\n                  buttonStyle={styles.saveButton}\r\n                  title=\"Save Changes\"\r\n                  onPress={() => storeSettings()}\r\n                />\r\n            </View>\r\n        </View>\r\n    )\r\n}\r\n\r\nSoundScreen.propTypes = {\r\n    navigation: PropTypes.object,\r\n    route: PropTypes.object,\r\n};\r\n\r\nexport default SoundScreen;"]},"metadata":{},"sourceType":"module"}