{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Jorge Aquino\\\\Documents\\\\GitHub\\\\brain-exercise\\\\src\\\\screens\\\\Game\\\\TriviaScreen.jsx\";\nimport \"react-native-gesture-handler\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Button } from \"react-native-elements\";\nimport PropTypes from \"prop-types\";\nimport ProgressBar from \"../../components/ProgressBar\";\nimport getProblem from \"../../assets/trivia\";\nvar styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    backgroundColor: \"#eaeaea\"\n  },\n  instructionText: {\n    fontSize: 32,\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  questionText: {\n    fontSize: 24,\n    textAlign: \"center\"\n  },\n  answerText: {\n    fontSize: 28,\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  actualAnswerText: {\n    fontSize: 28,\n    textAlign: \"center\"\n  },\n  textContainer: {\n    flex: 1,\n    paddingLeft: 20,\n    paddingRight: 20,\n    paddingBottom: 30,\n    justifyContent: \"space-between\",\n    backgroundColor: \"#eaeaea\",\n    flexDirection: \"column\",\n    flexWrap: \"wrap\",\n    alignItems: \"center\"\n  },\n  container: {\n    flex: 3,\n    paddingBottom: 50,\n    paddingLeft: 10,\n    paddingRight: 10,\n    justifyContent: \"space-around\",\n    flexDirection: \"row\",\n    backgroundColor: \"#eaeaea\",\n    flexWrap: \"wrap\",\n    alignContent: \"stretch\"\n  },\n  button: {\n    width: 300,\n    height: 50,\n    marginTop: 20,\n    marginBottom: 50,\n    alignSelf: \"center\"\n  },\n  buttonTitle: {\n    textAlign: \"center\",\n    fontSize: 20,\n    fontWeight: \"100\",\n    color: \"white\"\n  }\n});\n\nfunction TriviaScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(getProblem()),\n      _useState2 = _slicedToArray(_useState, 2),\n      problem = _useState2[0],\n      setProblem = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      answered = _useState4[0],\n      setAnswered = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      finished = _useState6[0],\n      setFinished = _useState6[1];\n\n  function getNewProblem() {\n    setProblem(getProblem());\n    setAnswered(false);\n  }\n\n  return React.createElement(View, {\n    style: styles.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: {\n      opacity: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, React.createElement(ProgressBar, {\n    seconds: 300,\n    red: 60,\n    func: function func() {\n      setFinished(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: styles.textContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.instructionText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, \"Write down both the question and answer to: \"), React.createElement(Text, {\n    style: styles.questionText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, problem.question), React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.answerText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, answered ? \"Answer:\" : \"\"), React.createElement(Text, {\n    style: styles.actualAnswerText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, answered ? problem.answer : \"\"))), React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, React.createElement(Button, {\n    title: finished ? \"Finish Writing Section\" : answered ? \"Next\" : \"Show Answer\",\n    buttonStyle: styles.button,\n    titleStyle: styles.buttonTitle,\n    onPress: function onPress() {\n      if (!finished) {\n        if (!answered) {\n          setAnswered(true);\n        } else {\n          getNewProblem();\n        }\n      } else {\n        navigation.navigate(\"FinishedScreen\");\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  })));\n}\n\nTriviaScreen.propTypes = {\n  navigation: PropTypes.object\n};\nexport default TriviaScreen;","map":{"version":3,"sources":["C:/Users/Jorge Aquino/Documents/GitHub/brain-exercise/src/screens/Game/TriviaScreen.jsx"],"names":["React","useState","Button","PropTypes","ProgressBar","getProblem","styles","StyleSheet","create","root","flex","backgroundColor","instructionText","fontSize","fontWeight","textAlign","questionText","answerText","actualAnswerText","textContainer","paddingLeft","paddingRight","paddingBottom","justifyContent","flexDirection","flexWrap","alignItems","container","alignContent","button","width","height","marginTop","marginBottom","alignSelf","buttonTitle","color","TriviaScreen","navigation","problem","setProblem","answered","setAnswered","finished","setFinished","getNewProblem","opacity","question","answer","navigate","propTypes","object"],"mappings":"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","sourcesContent":["import \"react-native-gesture-handler\";\r\nimport React, { useState } from \"react\";\r\nimport { View, Text, StyleSheet } from \"react-native\";\r\nimport { Button } from \"react-native-elements\";\r\nimport PropTypes from \"prop-types\";\r\nimport ProgressBar from \"../../components/ProgressBar\";\r\nimport getProblem from \"../../assets/trivia\";\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    backgroundColor: \"#eaeaea\",\r\n  },\r\n  instructionText: {\r\n    fontSize: 32,\r\n    fontWeight: \"bold\",\r\n    textAlign: \"center\",\r\n  },\r\n  questionText: {\r\n    fontSize: 24,\r\n    textAlign: \"center\",\r\n  },\r\n  answerText: {\r\n    fontSize: 28,\r\n    fontWeight: \"bold\",\r\n    textAlign: \"center\",\r\n  },\r\n  actualAnswerText: {\r\n    fontSize: 28,\r\n    textAlign: \"center\",\r\n  },\r\n  textContainer: {\r\n    flex: 1,\r\n    paddingLeft: 20,\r\n    paddingRight: 20,\r\n    paddingBottom: 30,\r\n    justifyContent: \"space-between\",\r\n    backgroundColor: \"#eaeaea\",\r\n    flexDirection: \"column\",\r\n    flexWrap: \"wrap\",\r\n    alignItems: \"center\",\r\n  },\r\n  container: {\r\n    flex: 3,\r\n    paddingBottom: 50,\r\n    paddingLeft: 10,\r\n    paddingRight: 10,\r\n    justifyContent: \"space-around\",\r\n    flexDirection: \"row\",\r\n    backgroundColor: \"#eaeaea\",\r\n    flexWrap: \"wrap\",\r\n    alignContent: \"stretch\",\r\n  },\r\n  button: {\r\n    width: 300,\r\n    height: 50,\r\n    marginTop: 20,\r\n    marginBottom: 50,\r\n    alignSelf: \"center\",\r\n  },\r\n  buttonTitle: {\r\n    textAlign: \"center\",\r\n    fontSize: 20,\r\n    fontWeight: \"100\",\r\n    color: \"white\",\r\n  },\r\n});\r\n\r\nfunction TriviaScreen( {navigation} ) {\r\n  const [problem, setProblem] = useState(getProblem());\r\n  const [answered, setAnswered] = useState(false)\r\n  const [finished, setFinished] = useState(false)\r\n\r\n  function getNewProblem() {\r\n    setProblem(getProblem());\r\n    setAnswered(false)\r\n  }\r\n\r\n  return (\r\n    <View style={styles.root}>\r\n      <View style={{opacity: 0}}>\r\n        <ProgressBar seconds = {300} red = {60} func = {() => {setFinished(true)}}/>\r\n      </View>\r\n      \r\n      <View style={styles.textContainer}>\r\n        <Text style={styles.instructionText}>Write down both the question and answer to: </Text>\r\n        <Text style = {styles.questionText}>{problem.question}</Text>\r\n        <View>\r\n          <Text style = {styles.answerText}>{answered ? \"Answer:\" : \"\"}</Text>\r\n          <Text style = {styles.actualAnswerText}>{answered ? problem.answer : \"\"}</Text>\r\n        </View>\r\n      </View>\r\n      <View>\r\n        <Button\r\n          // eslint-disable-next-line no-nested-ternary\r\n          title={finished ? \"Finish Writing Section\" : (answered ? \"Next\" : \"Show Answer\")}\r\n          buttonStyle={styles.button}\r\n          titleStyle = {styles.buttonTitle}\r\n          onPress={() => {\r\n            if (!finished) {\r\n              if (!answered) {\r\n                setAnswered(true)\r\n              } else {\r\n                getNewProblem()\r\n              }\r\n            } else {\r\n              navigation.navigate(\"FinishedScreen\")\r\n            }\r\n          }}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nTriviaScreen.propTypes = {\r\n  navigation: PropTypes.object,\r\n};\r\n\r\nexport default TriviaScreen;\r\n"]},"metadata":{},"sourceType":"module"}