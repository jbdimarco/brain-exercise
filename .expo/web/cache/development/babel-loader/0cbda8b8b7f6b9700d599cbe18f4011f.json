{"ast":null,"code":"function randomChoiceFromRange(range) {\n  var start = range.start,\n      end = range.end;\n  var choice = Math.floor(start + Math.random() * (end - start));\n  return choice;\n}\n\nfunction shuffleChoices(array) {\n  for (var i = array.length - 1; i > 0; i -= 1) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n}\n\nfunction generateProblem(difficulty) {\n  var a;\n  var b;\n  var operator;\n  var solution;\n\n  if (difficulty === 1) {\n    a = Math.floor(Math.random() * 10 + 1);\n    b = Math.floor(Math.random() * 10 + 1);\n    operator = \" + \";\n    solution = a + b;\n  } else if (difficulty === 2) {\n    a = Math.floor(Math.random() * 10 + 1);\n    b = Math.floor(Math.random() * 10 + 1);\n    var choosePlus = Math.floor(Math.random() * 2 + 1) % 2 === 0;\n    operator = choosePlus ? \" + \" : \" - \";\n    solution = choosePlus ? a + b : a - b;\n  } else if (difficulty === 3) {\n    a = Math.floor(Math.random() * 10 + 1);\n    b = Math.floor(Math.random() * 10 + 1);\n    operator = \" x \";\n    solution = a * b;\n  } else if (difficulty === 4) {\n    a = Math.floor(Math.random() * 100 + 1);\n    b = Math.floor(Math.random() * 100 + 1);\n\n    var _choosePlus = Math.floor(Math.random() * 2 + 1) % 2 === 0;\n\n    operator = _choosePlus ? \" + \" : \" - \";\n    solution = _choosePlus ? a + b : a - b;\n  }\n\n  return {\n    expression: a + operator + b,\n    solution: solution\n  };\n}\n\nfunction generateRanges(difficulty, solution) {\n  var upperRange;\n  var lowRange;\n\n  if (difficulty === 1) {\n    upperRange = {\n      start: solution + 1,\n      end: 20\n    };\n    lowRange = {\n      start: 2,\n      end: solution\n    };\n  } else if (difficulty === 2) {\n    upperRange = {\n      start: solution + 1,\n      end: 20\n    };\n    lowRange = {\n      start: -9,\n      end: solution\n    };\n  } else if (difficulty === 3) {\n    upperRange = {\n      start: solution + 1,\n      end: 100\n    };\n    lowRange = {\n      start: 1,\n      end: solution\n    };\n  } else if (difficulty === 4) {\n    upperRange = {\n      start: solution + 1,\n      end: 200\n    };\n    lowRange = {\n      start: -99,\n      end: solution\n    };\n  }\n\n  return {\n    upperRange: upperRange,\n    lowRange: lowRange\n  };\n}\n\nfunction generateChoices(difficulty, solution) {\n  var numWrongChoices = 2;\n\n  var _generateRanges = generateRanges(difficulty, solution),\n      upperRange = _generateRanges.upperRange,\n      lowRange = _generateRanges.lowRange;\n\n  var choicesArray = [];\n\n  for (var i = 0; i < numWrongChoices; i += 1) {\n    var pickFromUpper = Math.floor(Math.random() * 2 + 1) % 2 === 0;\n    var upperRangeLength = upperRange.end - upperRange.start;\n    var lowRangeLength = lowRange.end - lowRange.start;\n    var range = void 0;\n\n    if (upperRangeLength > 0 && lowRangeLength > 0) {\n      range = pickFromUpper ? upperRange : lowRange;\n    } else {\n      range = upperRangeLength > 0 ? upperRange : lowRange;\n    }\n\n    var choice = randomChoiceFromRange(range);\n    var firstSplitLength = choice - range.start;\n    var secondSplitLength = range.end - (choice + 1);\n\n    if (firstSplitLength > secondSplitLength) {\n      range.end = choice;\n    } else {\n      range.start = choice + 1;\n    }\n\n    choicesArray.push(choice);\n  }\n\n  choicesArray.push(solution);\n  return choicesArray;\n}\n\nfunction getProblemObject(difficulty) {\n  var problem = generateProblem(difficulty);\n  var expression = problem.expression,\n      solution = problem.solution;\n  var choicesArray = generateChoices(difficulty, solution);\n  shuffleChoices(choicesArray);\n  return {\n    expression: expression,\n    solution: solution,\n    choices: choicesArray\n  };\n}\n\nexport default function getProblem() {\n  var randomDifficulty = Math.floor(Math.random() * 4 + 1);\n  var problemObject = getProblemObject(randomDifficulty);\n  return problemObject;\n}","map":{"version":3,"sources":["C:/Users/Jorge Aquino/Documents/GitHub/brain-exercise/src/scripts/game-logic.js"],"names":["randomChoiceFromRange","range","start","end","choice","Math","floor","random","shuffleChoices","array","i","length","j","temp","generateProblem","difficulty","a","b","operator","solution","choosePlus","expression","generateRanges","upperRange","lowRange","generateChoices","numWrongChoices","choicesArray","pickFromUpper","upperRangeLength","lowRangeLength","firstSplitLength","secondSplitLength","push","getProblemObject","problem","choices","getProblem","randomDifficulty","problemObject"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\r\n/** randomChoiceFromRange:\r\n * @param {*} range\r\n * Returns a random integer from within the range,\r\n * exclusive of range.end */\r\nfunction randomChoiceFromRange(range) {\r\n  const { start, end } = range;\r\n  const choice = Math.floor(start + Math.random() * (end - start));\r\n  return choice;\r\n}\r\n\r\n/** shuffleChoices:\r\n *  @param {*} array\r\n *  Returns a shuffled array using the Fisher-Yates algorithm\r\n *  for shuffling.\r\n *\r\n *  The idea is to walk through the array in reverse order and swap\r\n *  each element with a random one before it.\r\n *\r\n *  Through this method, all possible arrangements\r\n *  will have equal probabilities of occurring. */\r\nfunction shuffleChoices(array) {\r\n  for (let i = array.length - 1; i > 0; i -= 1) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    const temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n  }\r\n}\r\n\r\n/* generateProblem:\r\n * Based on the difficulty level which is a number from 1-4, returns an object\r\n * representation of a math problem which consists of the string\r\n * expression of the problem, and its solution.\r\n *\r\n * Level 1: adding numbers 1 - 10\r\n * Level 2: adding and subtracting numbers 1 - 10\r\n * Level 3: multiplication numbers 1 - 10\r\n * Level 4: adding and subtracting numbers 1-100\r\n * test here: https://jsbin.com/jedilijege/1/edit?js,console */\r\nfunction generateProblem(difficulty) {\r\n  let a;\r\n  let b;\r\n  let operator;\r\n  let solution;\r\n  if (difficulty === 1) {\r\n    a = Math.floor(Math.random() * 10 + 1);\r\n    b = Math.floor(Math.random() * 10 + 1);\r\n    operator = \" + \";\r\n    solution = a + b;\r\n  } else if (difficulty === 2) {\r\n    a = Math.floor(Math.random() * 10 + 1);\r\n    b = Math.floor(Math.random() * 10 + 1);\r\n    const choosePlus = Math.floor(Math.random() * 2 + 1) % 2 === 0;\r\n    operator = choosePlus ? \" + \" : \" - \";\r\n    solution = choosePlus ? a + b : a - b;\r\n  } else if (difficulty === 3) {\r\n    a = Math.floor(Math.random() * 10 + 1);\r\n    b = Math.floor(Math.random() * 10 + 1);\r\n    operator = \" x \";\r\n    solution = a * b;\r\n  } else if (difficulty === 4) {\r\n    a = Math.floor(Math.random() * 100 + 1);\r\n    b = Math.floor(Math.random() * 100 + 1);\r\n    const choosePlus = Math.floor(Math.random() * 2 + 1) % 2 === 0;\r\n    operator = choosePlus ? \" + \" : \" - \";\r\n    solution = choosePlus ? a + b : a - b;\r\n  }\r\n  return {\r\n    expression: a + operator + b,\r\n    solution,\r\n  };\r\n}\r\n\r\n/** generateRanges:\r\n * @param {*} difficulty\r\n * @param {*} solution\r\n * Based on the difficulty level, returns the widest upper\r\n * and lower ranges for incorrect choices to be chosen from.\r\n *\r\n * The idea is to create upper and lower ranges that span all of\r\n * the possible solutions to a problem of the given difficulty\r\n * level.\r\n *\r\n * For example, with a difficulty 2 problem, the highest possible\r\n * solution is 20, and the lowest possible solution is -9.\r\n *\r\n * Therefore, the upper range would be (solution + 1 thru 20)\r\n * and the lower range would be (-9 thru solution). */\r\nfunction generateRanges(difficulty, solution) {\r\n  let upperRange;\r\n  let lowRange;\r\n  if (difficulty === 1) {\r\n    upperRange = { start: solution + 1, end: 20 };\r\n    lowRange = { start: 2, end: solution };\r\n  } else if (difficulty === 2) {\r\n    upperRange = { start: solution + 1, end: 20 };\r\n    lowRange = { start: -9, end: solution };\r\n  } else if (difficulty === 3) {\r\n    upperRange = { start: solution + 1, end: 100 };\r\n    lowRange = { start: 1, end: solution };\r\n  } else if (difficulty === 4) {\r\n    upperRange = { start: solution + 1, end: 200 };\r\n    lowRange = { start: -99, end: solution };\r\n  }\r\n  return {\r\n    upperRange,\r\n    lowRange,\r\n  };\r\n}\r\n\r\n/** generateChoices:\r\n * @param {*} difficulty\r\n * @param {*} solution\r\n * Returns array of unique answer choices\r\n *\r\n *  Including the solution,\r\n *  4 answer choices are returned when difficulty > 2.\r\n *  3 answer choices are returned when difficulty <= 2.\r\n *\r\n *  The idea is to pick choices at random from either a range of\r\n *  numbers above the solution (upperRange), or from a range of\r\n *  numbers below the solution (lowRange).\r\n *\r\n *  Through this method, we ensure that the array\r\n *  returned contains no duplicate choices and there is just\r\n *  one correct choice. */\r\nfunction generateChoices(difficulty, solution) {\r\n  const numWrongChoices = 2;\r\n  const { upperRange, lowRange } = generateRanges(difficulty, solution);\r\n\r\n  const choicesArray = [];\r\n  for (let i = 0; i < numWrongChoices; i += 1) {\r\n    const pickFromUpper = Math.floor(Math.random() * 2 + 1) % 2 === 0;\r\n    const upperRangeLength = upperRange.end - upperRange.start;\r\n    const lowRangeLength = lowRange.end - lowRange.start;\r\n\r\n    let range;\r\n    if (upperRangeLength > 0 && lowRangeLength > 0) {\r\n      range = pickFromUpper ? upperRange : lowRange;\r\n    } else {\r\n      range = upperRangeLength > 0 ? upperRange : lowRange;\r\n    }\r\n\r\n    const choice = randomChoiceFromRange(range);\r\n    const firstSplitLength = choice - range.start;\r\n    const secondSplitLength = range.end - (choice + 1);\r\n    if (firstSplitLength > secondSplitLength) {\r\n      range.end = choice;\r\n    } else {\r\n      range.start = choice + 1;\r\n    }\r\n    choicesArray.push(choice);\r\n  }\r\n  choicesArray.push(solution);\r\n  return choicesArray;\r\n}\r\n\r\n/** generateChoices:\r\n * @param {*} difficulty\r\n * Based on the difficulty level which is a number from 1-4, returns\r\n * the full object representation of a math problem which consists\r\n * of the string expression of the problem, its answer choices,\r\n * and its solution. */\r\nfunction getProblemObject(difficulty) {\r\n  const problem = generateProblem(difficulty);\r\n  const { expression, solution } = problem;\r\n  const choicesArray = generateChoices(difficulty, solution);\r\n  shuffleChoices(choicesArray);\r\n  return {\r\n    expression,\r\n    solution,\r\n    choices: choicesArray,\r\n  };\r\n}\r\n\r\n/** getProblem:\r\n * Returns the object representation of a math problem with\r\n * a random level of difficulty. */\r\nexport default function getProblem() {\r\n  const randomDifficulty = Math.floor(Math.random() * 4 + 1);\r\n  const problemObject = getProblemObject(randomDifficulty);\r\n  return problemObject;\r\n}\r\n\r\n// console.log(getProblem());\r\n"]},"metadata":{},"sourceType":"module"}