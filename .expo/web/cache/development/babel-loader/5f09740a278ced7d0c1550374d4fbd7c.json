{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\Jorge Aquino\\\\Documents\\\\GitHub\\\\brain-exercise\\\\src\\\\screens\\\\Settings\\\\SettingsScreen.jsx\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport { Notifications } from \"expo\";\nimport { Button } from \"react-native-elements\";\nimport PropTypes from \"prop-types\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { useFocusEffect } from '@react-navigation/native';\nvar styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignContent: \"center\",\n    backgroundColor: \"#f5f5f5\",\n    marginVertical: 30\n  },\n  reminder: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    marginTop: 30,\n    marginHorizontal: 30\n  },\n  text: {\n    textAlign: \"left\",\n    fontSize: 20,\n    fontWeight: \"bold\",\n    marginHorizontal: 30\n  },\n  subtext: {\n    textAlign: \"left\",\n    alignSelf: \"center\",\n    fontSize: 18\n  },\n  button: {\n    borderRadius: 10,\n    borderColor: \"gray\",\n    borderWidth: 0.9\n  },\n  fontButton: {\n    alignContent: \"space-between\",\n    color: \"gray\",\n    borderRadius: 10,\n    marginTop: 20\n  },\n  animation: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    marginHorizontal: 30\n  }\n});\nexport var defaultSettings = {\n  notificationsActive: false,\n  scheduledTime: new Date(),\n  fontSize: 20,\n  soundEffectsOn: false,\n  backgroundMusicOn: false,\n  voiceOverOn: false,\n  animationOn: false\n};\n\nvar storeSettings = function storeSettings(settingsObj) {\n  var jsonSettings;\n  return _regeneratorRuntime.async(function storeSettings$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          jsonSettings = JSON.stringify(settingsObj);\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"SETTINGS\", jsonSettings));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar pullSettings = function pullSettings() {\n  var jsonSettings, result;\n  return _regeneratorRuntime.async(function pullSettings$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"SETTINGS\"));\n\n        case 2:\n          jsonSettings = _context2.sent;\n\n          if (!(jsonSettings !== null)) {\n            _context2.next = 8;\n            break;\n          }\n\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(JSON.parse(jsonSettings));\n\n        case 6:\n          result = _context2.sent;\n          return _context2.abrupt(\"return\", result);\n\n        case 8:\n          return _context2.abrupt(\"return\", defaultSettings);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nfunction SettingsScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(defaultSettings),\n      _useState2 = _slicedToArray(_useState, 2),\n      settings = _useState2[0],\n      setSettings = _useState2[1];\n\n  var _useState3 = useState(settings.notificationsActive),\n      _useState4 = _slicedToArray(_useState3, 2),\n      toggleOn = _useState4[0],\n      setToggleOn = _useState4[1];\n\n  var _useState5 = useState(settings.animationOn),\n      _useState6 = _slicedToArray(_useState5, 2),\n      animationToggleOn = _useState6[0],\n      setAnimationToggleOn = _useState6[1];\n\n  useFocusEffect(React.useCallback(function () {\n    pullSettings().then(function (item) {\n      return setSettings(item);\n    });\n  }, []));\n\n  function getDate() {\n    var dateObj = new Date(settings.scheduledTime);\n    var date = dateObj.toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit'\n    }).replace(/^(?:00:)?0?/, '');\n    return date;\n  }\n\n  var toggleSwitch = function toggleSwitch() {\n    if (toggleOn) {\n      Notifications.cancelAllScheduledNotificationsAsync();\n      setToggleOn(false);\n      settings.notificationsActive = false;\n    } else {\n      setToggleOn(true);\n      settings.notificationsActive = true;\n    }\n\n    storeSettings(settings);\n  };\n\n  var toggleAnimations = function toggleAnimations() {\n    if (animationToggleOn) {\n      setAnimationToggleOn(false);\n      settings.animationOn = false;\n    } else {\n      setAnimationToggleOn(true);\n      settings.animationOn = true;\n    }\n\n    storeSettings(settings);\n  };\n\n  return React.createElement(View, {\n    style: styles.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 6\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 8\n    }\n  }, \"Notifications\"), React.createElement(View, {\n    style: styles.reminder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 8\n    }\n  }, React.createElement(Text, {\n    style: styles.subtext,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, \"Daily Reminder\"), React.createElement(Switch, {\n    trackColor: {\n      false: \"#ffffff\",\n      true: \"#2a652c\"\n    },\n    onValueChange: toggleSwitch,\n    value: toggleOn,\n    accessibilityRole: \"switch\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  })), toggleOn && React.createElement(View, {\n    style: styles.reminder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.subtext,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, \"Set Reminder Time\"), React.createElement(Button, {\n    title: getDate(),\n    type: \"outline\",\n    onPress: function onPress() {\n      return navigation.navigate(\"TimePicker\", settings);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  })), React.createElement(Button, {\n    title: \"Font Size                                                 >\",\n    buttonStyle: styles.fontButton,\n    titleStyle: {\n      fontSize: 20,\n      fontWeight: \"bold\",\n      color: \"black\"\n    },\n    type: \"clear\",\n    containerStyle: {\n      margin: 20\n    },\n    onPress: function onPress() {\n      return navigation.navigate(\"FontSize\", settings);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    title: \"Sounds                                                    >\",\n    buttonStyle: styles.fontButton,\n    titleStyle: {\n      fontSize: 20,\n      fontWeight: \"bold\",\n      color: \"black\"\n    },\n    type: \"clear\",\n    containerStyle: {\n      margin: 20\n    },\n    onPress: function onPress() {\n      return navigation.navigate(\"SoundScreen\", settings);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: styles.animation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: {\n      marginHorizontal: 0,\n      fontSize: 20,\n      fontWeight: \"bold\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }\n  }, \"Animation\"), React.createElement(Switch, {\n    trackColor: {\n      false: \"#ffffff\",\n      true: \"#2a652c\"\n    },\n    onValueChange: function onValueChange() {\n      return toggleAnimations();\n    },\n    value: animationToggleOn,\n    accessibilityRole: \"switch\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  })));\n}\n\nSettingsScreen.propTypes = {\n  navigation: PropTypes.object\n};\nexport default SettingsScreen;","map":{"version":3,"sources":["C:/Users/Jorge Aquino/Documents/GitHub/brain-exercise/src/screens/Settings/SettingsScreen.jsx"],"names":["React","useState","Notifications","Button","PropTypes","AsyncStorage","useFocusEffect","styles","StyleSheet","create","root","flex","alignContent","backgroundColor","marginVertical","reminder","flexDirection","justifyContent","marginTop","marginHorizontal","text","textAlign","fontSize","fontWeight","subtext","alignSelf","button","borderRadius","borderColor","borderWidth","fontButton","color","animation","defaultSettings","notificationsActive","scheduledTime","Date","soundEffectsOn","backgroundMusicOn","voiceOverOn","animationOn","storeSettings","settingsObj","jsonSettings","JSON","stringify","setItem","pullSettings","getItem","parse","result","SettingsScreen","navigation","settings","setSettings","toggleOn","setToggleOn","animationToggleOn","setAnimationToggleOn","useCallback","then","item","getDate","dateObj","date","toLocaleTimeString","hour","minute","replace","toggleSwitch","cancelAllScheduledNotificationsAsync","toggleAnimations","false","true","navigate","margin","propTypes","object"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  Switch,\r\n} from \"react-native\";\r\nimport { Notifications } from \"expo\";\r\nimport { Button } from \"react-native-elements\";\r\nimport PropTypes from \"prop-types\";\r\nimport AsyncStorage from \"@react-native-community/async-storage\";\r\nimport { useFocusEffect } from '@react-navigation/native';\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    alignContent: \"center\",\r\n    backgroundColor: \"#f5f5f5\",\r\n    marginVertical: 30,\r\n  },\r\n  reminder: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    marginTop: 30,\r\n    marginHorizontal: 30,\r\n  },\r\n  text: {\r\n    textAlign: \"left\",\r\n    fontSize: 20,\r\n    fontWeight: \"bold\",\r\n    marginHorizontal: 30,\r\n  },\r\n  subtext: {\r\n    textAlign: \"left\",\r\n    alignSelf: \"center\",\r\n    fontSize: 18,\r\n  },\r\n  button: {\r\n    borderRadius: 10,\r\n    borderColor: \"gray\",\r\n    borderWidth: 0.9,\r\n  },\r\n  fontButton: {\r\n    alignContent: \"space-between\",\r\n    color: \"gray\",\r\n    borderRadius: 10,\r\n    marginTop: 20,\r\n  },\r\n  animation: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    marginHorizontal: 30,\r\n  }\r\n});\r\n\r\nexport const defaultSettings = {\r\n  notificationsActive: false,\r\n  scheduledTime: new Date(),\r\n  fontSize: 20,\r\n  soundEffectsOn: false,\r\n  backgroundMusicOn: false,\r\n  voiceOverOn: false,\r\n  animationOn: false,\r\n}\r\n\r\n/**\r\n * Takes in a settings object and stores it in Async Storage.\r\n * @param {Object} settingsObj A settings object\r\n */\r\nconst storeSettings = async (settingsObj) => {\r\n  const jsonSettings = JSON.stringify(settingsObj)\r\n  await AsyncStorage.setItem(\"SETTINGS\", jsonSettings)\r\n}\r\n\r\n/**\r\n * Pulls an object containing the app settings from Async Storage and returns it.\r\n * If no settings exist in Async Storage, default settings are pushed and returned.\r\n */\r\nconst pullSettings = async () => {\r\n  const jsonSettings = await AsyncStorage.getItem(\"SETTINGS\")\r\n  if (jsonSettings !== null) {\r\n     const result = await JSON.parse(jsonSettings);\r\n     return result;\r\n  } \r\n  return defaultSettings\r\n}\r\n\r\n// Settings Navigation\r\nfunction SettingsScreen({ navigation }) {\r\n  const [settings, setSettings] = useState(defaultSettings);\r\n  const [toggleOn, setToggleOn] = useState(settings.notificationsActive);\r\n  const [animationToggleOn, setAnimationToggleOn] = useState(settings.animationOn)\r\n\r\n  useFocusEffect(\r\n    React.useCallback(() => {\r\n      // Do something when the screen is focused\r\n      pullSettings()\r\n      .then((item) => setSettings(item));\r\n    }, [])\r\n  );\r\n\r\n  function getDate() {\r\n    const dateObj = new Date(settings.scheduledTime);\r\n    const date = dateObj.toLocaleTimeString('en-US', {hour: '2-digit', minute: '2-digit'}).replace(/^(?:00:)?0?/, '');\r\n    return date;\r\n  }\r\n\r\n  const toggleSwitch = () => {\r\n    if (toggleOn) {\r\n      // going from enabled to unenabled\r\n      Notifications.cancelAllScheduledNotificationsAsync();\r\n      setToggleOn(false);\r\n      settings.notificationsActive = false\r\n    } else {\r\n      // going from unenabled to enabled\r\n      setToggleOn(true);\r\n      settings.notificationsActive = true\r\n    }\r\n    storeSettings(settings)\r\n  }\r\n\r\n  const toggleAnimations = () => {\r\n    if (animationToggleOn) {\r\n      // going from enabled to unenabled\r\n      setAnimationToggleOn(false)\r\n      settings.animationOn = false\r\n    } else {\r\n      setAnimationToggleOn(true)\r\n      settings.animationOn = true\r\n    }\r\n    storeSettings(settings)\r\n  }\r\n\r\n  return (\r\n     <View style={styles.root}>\r\n       <Text style={styles.text}>Notifications</Text>\r\n       <View style={styles.reminder}>\r\n        <Text style={styles.subtext}>Daily Reminder</Text>\r\n        <Switch\r\n          trackColor={{ false: \"#ffffff\", true: \"#2a652c\" }}\r\n          onValueChange={toggleSwitch}\r\n          value={toggleOn}\r\n          accessibilityRole=\"switch\"\r\n        />\r\n      </View>\r\n      {\r\n        toggleOn &&\r\n          <View style={styles.reminder}>\r\n            <Text style={styles.subtext}>Set Reminder Time</Text>\r\n            <Button\r\n              title={getDate()}\r\n              type=\"outline\"\r\n              onPress={() => navigation.navigate(\"TimePicker\", settings)}\r\n            />\r\n          </View>\r\n      }\r\n      <Button\r\n        title=\"Font Size                                                 >\"\r\n        buttonStyle={styles.fontButton}\r\n        titleStyle={{\r\n          fontSize: 20,\r\n          fontWeight: \"bold\",\r\n          color: \"black\",\r\n        }}\r\n        type=\"clear\"\r\n        containerStyle={{ margin: 20 }}\r\n        onPress={() => navigation.navigate(\"FontSize\", settings)}\r\n      />\r\n      <Button\r\n        title=\"Sounds                                                    >\"\r\n        buttonStyle={styles.fontButton}\r\n        titleStyle={{\r\n          fontSize: 20,\r\n          fontWeight: \"bold\",\r\n          color: \"black\",\r\n        }}\r\n        type=\"clear\"\r\n        containerStyle={{ margin: 20 }}\r\n        onPress={() => navigation.navigate(\"SoundScreen\", settings)}\r\n      />\r\n      <View style={styles.animation}>\r\n        <Text style={{marginHorizontal: 0, fontSize: 20, fontWeight: \"bold\"}}>Animation</Text>\r\n        <Switch\r\n          trackColor={{ false: \"#ffffff\", true: \"#2a652c\" }}\r\n          onValueChange={() => toggleAnimations()}\r\n          value={animationToggleOn}\r\n          accessibilityRole=\"switch\"\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nSettingsScreen.propTypes = {\r\n  navigation: PropTypes.object,\r\n};\r\n\r\nexport default SettingsScreen;\r\n"]},"metadata":{},"sourceType":"module"}