{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Jorge Aquino\\\\Documents\\\\GitHub\\\\brain-exercise\\\\src\\\\screens\\\\Settings\\\\FontSize.jsx\";\nimport React, { useState } from \"react\";\nimport { Button, Slider } from \"react-native-elements\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport PropTypes from 'prop-types';\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { defaultSettings } from \"./SettingsScreen.jsx\";\nvar styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignContent: \"center\",\n    backgroundColor: \"#f5f5f5\",\n    marginVertical: 30,\n    marginHorizontal: 30\n  },\n  saveButton: {\n    backgroundColor: \"#2a652c\"\n  },\n  sliderWithButton: {\n    paddingVertical: 160\n  },\n  texts: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginBottom: 20\n  }\n});\n\nfunction FontSize(_ref) {\n  var route = _ref.route;\n\n  var _useState = useState(route.params.fontSize || defaultSettings.fontSize),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var storeSettings = function storeSettings() {\n    var settingsObj, jsonSettings;\n    return _regeneratorRuntime.async(function storeSettings$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            settingsObj = route.params;\n            settingsObj.fontSize = value;\n            jsonSettings = JSON.stringify(settingsObj);\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"SETTINGS\", jsonSettings));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: StyleSheet.create({\n      fontSize: value,\n      minHeight: 200\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, \"Drag the slider below to make the text on screen smaller or larger.\"), React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, React.createElement(Slider, {\n    style: styles.slider,\n    value: value,\n    thumbTintColor: \"#2a652c\",\n    minimumValue: 16,\n    maximumValue: 34,\n    step: 4,\n    onValueChange: function onValueChange(v) {\n      return setValue(v);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: styles.texts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 16\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, \"T\"), React.createElement(Text, {\n    style: {\n      fontSize: 34\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, \"T\"))), React.createElement(Button, {\n    buttonStyle: styles.saveButton,\n    title: \"Save Changes\",\n    onPress: storeSettings,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }));\n}\n\nFontSize.propTypes = {\n  route: PropTypes.any\n};\nexport default FontSize;","map":{"version":3,"sources":["C:/Users/Jorge Aquino/Documents/GitHub/brain-exercise/src/screens/Settings/FontSize.jsx"],"names":["React","useState","Button","Slider","PropTypes","AsyncStorage","defaultSettings","styles","StyleSheet","create","root","flex","alignContent","backgroundColor","marginVertical","marginHorizontal","saveButton","sliderWithButton","paddingVertical","texts","justifyContent","flexDirection","alignItems","marginBottom","FontSize","route","params","fontSize","value","setValue","storeSettings","settingsObj","jsonSettings","JSON","stringify","setItem","minHeight","slider","v","propTypes","any"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button, Slider } from \"react-native-elements\";\r\nimport { StyleSheet, View, Text } from \"react-native\";\r\nimport PropTypes from 'prop-types';\r\nimport AsyncStorage from \"@react-native-community/async-storage\";\r\nimport { defaultSettings } from './SettingsScreen.jsx';\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    alignContent: \"center\",\r\n    backgroundColor: \"#f5f5f5\",\r\n    marginVertical: 30,\r\n    marginHorizontal: 30,\r\n  },\r\n  saveButton: {\r\n    backgroundColor: \"#2a652c\"\r\n  },\r\n  sliderWithButton: {\r\n    paddingVertical: 160,\r\n  },\r\n  texts: {\r\n    justifyContent: \"space-between\",\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    marginBottom: 20,\r\n  },\r\n});\r\n\r\nfunction FontSize ({ route }) {\r\n  const [value, setValue] = useState(route.params.fontSize \r\n    || defaultSettings.fontSize);\r\n\r\n  const storeSettings = async () => {\r\n    const settingsObj = route.params;\r\n    settingsObj.fontSize = value;\r\n    const jsonSettings = JSON.stringify(settingsObj);\r\n    await AsyncStorage.setItem(\"SETTINGS\", jsonSettings);\r\n  }\r\n\r\n  return (\r\n    <View style={styles.root}>\r\n      <Text style={StyleSheet.create({fontSize: value, minHeight:200})}>\r\n        Drag the slider below to make the text on screen smaller or larger.\r\n      </Text>\r\n      <View>\r\n        <Slider\r\n          style={styles.slider}\r\n          value={value}\r\n          thumbTintColor={\"#2a652c\"}\r\n          minimumValue={16}\r\n          maximumValue={34}\r\n          step={4}\r\n          onValueChange={(v) => setValue(v)}\r\n        />\r\n        <View style={styles.texts}>\r\n          <Text style={{fontSize:16}}>T</Text>\r\n          <Text style={{fontSize:34}}>T</Text>\r\n        </View>\r\n      </View>\r\n      <Button\r\n        buttonStyle={styles.saveButton}\r\n        title=\"Save Changes\"\r\n        onPress={storeSettings}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nFontSize.propTypes = {\r\n  route: PropTypes.any\r\n}\r\n\r\nexport default FontSize;\r\n"]},"metadata":{},"sourceType":"module"}