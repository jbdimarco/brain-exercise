{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Jorge Aquino\\\\Documents\\\\GitHub\\\\brain-exercise\\\\src\\\\screens\\\\Settings\\\\TimePicker.jsx\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Button } from \"react-native-elements\";\nimport DateTimePicker from \"@react-native-community/datetimepicker\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport PropTypes from \"prop-types\";\nimport { Notifications } from \"expo\";\nimport scheduleNotifications from \"../../scripts/notification-logic\";\nimport { defaultSettings } from \"./SettingsScreen.jsx\";\nvar styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignContent: \"center\",\n    backgroundColor: \"#f5f5f5\",\n    marginVertical: 30,\n    marginHorizontal: 30\n  },\n  text: {\n    textAlign: \"center\",\n    fontSize: 20,\n    marginVertical: 30\n  },\n  button: {\n    backgroundColor: \"#2a652c\",\n    borderRadius: 10,\n    marginTop: 20\n  }\n});\n\nfunction TimePicker(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState(route.params.scheduledTime || defaultSettings.scheduledTime),\n      _useState2 = _slicedToArray(_useState, 2),\n      date = _useState2[0],\n      setDate = _useState2[1];\n\n  var storeSettings = function storeSettings() {\n    var settingsObj, jsonSettings;\n    return _regeneratorRuntime.async(function storeSettings$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            settingsObj = route.params;\n            settingsObj.scheduledTime = date;\n            jsonSettings = JSON.stringify(settingsObj);\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"SETTINGS\", jsonSettings));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onChange = function onChange(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    setDate(currentDate);\n  };\n\n  function confirmTime() {\n    Notifications.cancelAllScheduledNotificationsAsync();\n    scheduleNotifications(date);\n    storeSettings();\n    navigation.goBack();\n  }\n\n  return React.createElement(View, {\n    style: styles.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, \"You will receive a notification at this time on Monday through Friday\"), React.createElement(DateTimePicker, {\n    testID: \"dateTimePicker\",\n    value: date,\n    mode: \"time\",\n    is24Hour: false,\n    display: \"default\",\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    buttonStyle: styles.button,\n    title: \"Confirm Time\",\n    type: \"solid\",\n    onPress: confirmTime,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }));\n}\n\nTimePicker.propTypes = {\n  navigation: PropTypes.object,\n  route: PropTypes.object\n};\nexport default TimePicker;","map":{"version":3,"sources":["C:/Users/Jorge Aquino/Documents/GitHub/brain-exercise/src/screens/Settings/TimePicker.jsx"],"names":["React","useState","Button","DateTimePicker","AsyncStorage","PropTypes","Notifications","scheduleNotifications","defaultSettings","styles","StyleSheet","create","root","flex","alignContent","backgroundColor","marginVertical","marginHorizontal","text","textAlign","fontSize","button","borderRadius","marginTop","TimePicker","navigation","route","params","scheduledTime","date","setDate","storeSettings","settingsObj","jsonSettings","JSON","stringify","setItem","onChange","event","selectedDate","currentDate","confirmTime","cancelAllScheduledNotificationsAsync","goBack","propTypes","object"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { View, Text, StyleSheet } from \"react-native\";\r\nimport { Button } from \"react-native-elements\";\r\nimport DateTimePicker from \"@react-native-community/datetimepicker\";\r\nimport AsyncStorage from \"@react-native-community/async-storage\"\r\nimport PropTypes from \"prop-types\";\r\nimport { Notifications } from \"expo\";\r\nimport scheduleNotifications from \"../../scripts/notification-logic\";\r\nimport { defaultSettings } from \"./SettingsScreen.jsx\";\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    alignContent: \"center\",\r\n    backgroundColor: \"#f5f5f5\",\r\n    marginVertical: 30,\r\n    marginHorizontal: 30,\r\n  },\r\n  text: {\r\n    textAlign: \"center\",\r\n    fontSize: 20,\r\n    marginVertical: 30,\r\n  },\r\n  button: {\r\n    backgroundColor: \"#2a652c\",\r\n    borderRadius: 10,\r\n    marginTop: 20,\r\n  }\r\n});\r\n\r\nfunction TimePicker({ navigation, route }) {\r\n\r\n  const [date, setDate] = useState(route.params.scheduledTime || defaultSettings.scheduledTime);\r\n\r\n  const storeSettings = async () => {\r\n    const settingsObj = route.params;\r\n    settingsObj.scheduledTime = date;\r\n    const jsonSettings = JSON.stringify(settingsObj);\r\n    await AsyncStorage.setItem(\"SETTINGS\", jsonSettings);\r\n  }\r\n\r\n  const onChange = (event, selectedDate) => {\r\n    const currentDate = selectedDate || date;\r\n    setDate(currentDate);\r\n  };\r\n\r\n  function confirmTime() {\r\n    Notifications.cancelAllScheduledNotificationsAsync();\r\n    scheduleNotifications(date);\r\n    storeSettings();\r\n    navigation.goBack()\r\n  }\r\n\r\n  return (\r\n    <View style={styles.root}>\r\n      <Text style={styles.text}>You will receive a notification at this time on Monday through Friday</Text>\r\n      <DateTimePicker \r\n        testID=\"dateTimePicker\"\r\n        value={date}\r\n        mode=\"time\"\r\n        is24Hour={false}\r\n        display=\"default\"\r\n        onChange={onChange}\r\n      />\r\n      <Button\r\n        buttonStyle={styles.button}\r\n        title=\"Confirm Time\"\r\n        type=\"solid\"\r\n        onPress={confirmTime}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nTimePicker.propTypes = {\r\n  navigation: PropTypes.object,\r\n  route: PropTypes.object,\r\n};\r\n\r\nexport default TimePicker;\r\n"]},"metadata":{},"sourceType":"module"}